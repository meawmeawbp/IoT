import cv2
import numpy as np
import math

# ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
video_path = r'C:\miewmiew\Hackathon\IoT\checkcheck\hsv_output2.mp4'
cap = cv2.VideoCapture(video_path)

# ‡∏î‡∏∂‡∏á FPS ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
fps = cap.get(cv2.CAP_PROP_FPS)
delay = int(1000 / fps)
frames_per_3sec = int(fps * 3)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('output_detect_blue_line.mp4', fourcc, fps, 
                      (int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)), int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))))

# ‡πÄ‡∏Å‡πá‡∏ö‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ
angles = []
frame_count = 0
baseline_angle = None

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    frame_count += 1


    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô HSV + Mask ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    lower_blue = np.array([90, 50, 50])
    upper_blue = np.array([130, 255, 255])
    mask = cv2.inRange(hsv, lower_blue, upper_blue)

    # ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Morphology
    kernel = np.ones((3, 3), np.uint8)
    mask = cv2.dilate(mask, kernel, iterations=1)

    # ‡∏ï‡∏±‡∏î noise ‡∏£‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å (Crop ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á)
    # üëâ ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î (y:y+h, x:x+w) ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
    h, w = frame.shape[:2]
    cropped_mask = mask[int(h/3):int(h*2/3), int(w/3):int(w*2/3)]
    cropped_frame = frame[int(h/3):int(h*2/3), int(w/3):int(w*2/3)]

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡πÉ‡∏ô mask
    edges = cv2.Canny(cropped_mask, 50, 150, apertureSize=3)
    lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=30, minLineLength=30, maxLineGap=10)

    angle = None
    if lines is not None:
        # ‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        longest = max(lines, key=lambda line: np.hypot(line[0][2]-line[0][0], line[0][3]-line[0][1]))
        x1, y1, x2, y2 = longest[0]

        # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏ö‡∏ô cropped_frame
        cv2.line(cropped_frame, (x1, y1), (x2, y2), (0, 0, 255), 2)

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°
        angle = math.degrees(math.atan2(y2 - y1, x2 - x1)) % 360

        # baseline_angle = ‡∏°‡∏∏‡∏°‡πÅ‡∏£‡∏Å
        if baseline_angle is None:
            baseline_angle = angle

        # ‡∏°‡∏∏‡∏° relative (0¬∞ baseline)
        relative_angle = (angle - baseline_angle + 360) % 360
        angles.append(relative_angle)

        # Overlay
        text = f"Rel.Angle: {relative_angle:.2f} deg"
        cv2.putText(cropped_frame, text, (10, 30),
                     cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    else:
        text = "No Line Detected"
        cv2.putText(cropped_frame, text, (10, 30),
                     cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)

    # ‡πÅ‡∏õ‡∏∞ cropped_frame ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô frame
    frame[int(h/3):int(h*2/3), int(w/3):int(w*2/3)] = cropped_frame

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    out.write(frame)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    cv2.imshow('Detect Blue Line', frame)
    if cv2.waitKey(delay) & 0xFF == ord('q'):
        break

cap.release()
out.release()
cv2.destroyAllWindows()

# ‡∏™‡∏£‡∏∏‡∏õ: export ‡∏°‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô CSV
import pandas as pd
df = pd.DataFrame({
    'frame_check': range(1, len(angles) + 1),
    'relative_angle': angles
})
df.to_csv('detected_blue_line_angles.csv', index=False)

print("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: output_detect_blue_line.mp4 + detected_blue_line_angles.csv")
